{"version":3,"sources":["components/SecondTask/Lists.module.css","components/ThirdTask/InputName.module.css","App.module.css","components/FirstTask/CloudMessageContainer.tsx","components/FirstTask/CloudMessage.tsx","components/common/Button.tsx","components/common/Checkbox.tsx","components/SecondTask/List.tsx","components/SecondTask/ListContainer.tsx","components/common/Input.tsx","components/ThirdTask/InputNameContainer.tsx","components/ThirdTask/InputName.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CloudMessageContainer","props","className","hours","minutes","state","name","surname","src","img","message","mesHour","mesMin","CloudMessage","h","Date","getHours","getMinutes","Button","buttonName","Checkbox","type","title","checked","callBack","onChange","List","style","lists","row","map","list","key","id","changeStatus","status","isDone","onClick","removeList","pointer","buttons","button","setPriorityFilter","ListContainer","useState","priority","setList","filter","setFilter","priorityListsFilter","filteredLists","console","log","value","CheckboxItem","newList","listsItem","find","InputForm","error","addItem","setError","onChangeItem","restProps","input","onBlur","e","currentTarget","trim","onKeyPress","charCode","InputNameContainer","userNamesArr","setUserNamesArr","inputItem","setItem","userNameArr","v1","userName","alert","addUserName","everyName","n","join","activeBox","listOfNames","Input","length","InputName","App","app_page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7adcd51d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lists\":\"Lists_lists__1BgLI\",\"list\":\"Lists_list__3zEyE\",\"title\":\"Lists_title__2yQ7D\",\"row\":\"Lists_row__AM4Qc\",\"buttons\":\"Lists_buttons__1Y3Yf\",\"pointer\":\"Lists_pointer__70egW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeBox\":\"InputName_activeBox__3zez8\",\"title\":\"InputName_title__z-0Np\",\"listOfNames\":\"InputName_listOfNames__1TEBG\",\"input\":\"InputName_input__2QgiS\",\"error\":\"InputName_error__3oiGP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_page\":\"App_app_page__IfUYN\"};","import React from 'react';\r\nimport {StateType} from './CloudMessage';\r\nimport style from './CloudMessage.module.css';\r\nimport './CloudMessage.css';\r\n\r\ntype PropsType = {\r\n    state: StateType\r\n    hours: number\r\n    minutes: number\r\n}\r\n\r\n\r\n\r\nconst CloudMessageContainer: React.FC<PropsType> = (props: PropsType) => {\r\n\r\n    return (\r\n        <div>\r\n        <section className='header'>\r\n            <div className='timeOne'>{props.hours}:{props.minutes}</div>\r\n            <h1 className='name'>Hi! I'm {props.state.name} {props.state.surname}</h1>\r\n        </section>\r\n        <section className='bubble'>\r\n         <div className='avatar'>\r\n             <img src={props.state.img} />\r\n             </div>\r\n              <div className='box1 sb5'>\r\n                        <div className='name'>{props.state.name}</div>\r\n                        <div className='message'>{props.state.message}</div>\r\n                        <div className='time'>{props.state.mesHour}:{props.state.mesMin}</div>\r\n                    </div>\r\n             </section>\r\n             </div>\r\n            )}\r\n\r\nexport default CloudMessageContainer;\r\n\r\n//{`${style.box1} ${style.sb5}`}","import React from 'react';\r\nimport CloudMessageContainer from './CloudMessageContainer';\r\n\r\n\r\n\r\nexport type StateType = {\r\n    img: string\r\n    name: string\r\n    surname: string\r\n    message: string\r\n    mesHour: number\r\n    mesMin: number\r\n};\r\n\r\nexport default function CloudMessage () {\r\n\r\n     let state: StateType = {\r\n        img: `https://cdn.pixabay.com/photo/2016/06/15/16/00/woman-1459220_1280.png`,\r\n        name: 'Ekaterina',\r\n        surname: ' Uchaykina',\r\n        message: \r\n        'Существует теория, которая утверждает, что если однажды кто-нибудь доподлинно выяснит, что такое и для чего нужна Вселенная, она тотчас же исчезнет, и вместо нее появится нечто еще более причудливое и необъяснимое. Существует и другая теория, согласно которой это уже случилось.',\r\n        mesHour: 15,\r\n        mesMin: 16\r\n        };\r\n\r\n        let h = new Date ();\r\n        let hours = h.getHours();\r\n        let minutes = h.getMinutes();\r\n            \r\n    return <CloudMessageContainer state={state} hours={hours} minutes={minutes}/>\r\n    }","import React from 'react';\r\n\r\ntype ButtonAddProps = {\r\n    buttonName: string,\r\n    onClick: () => void,\r\n    //className: string,\r\n    // disabled: boolean,\r\n    // active: boolean,\r\n}\r\n\r\nexport const Button = ({...props}) => {\r\n    return (\r\n    <button  {...props}>{props.buttonName}</button>\r\n    )\r\n}\r\n","\r\n//@ts-nocheck\r\nimport React, { ChangeEvent, DetailedHTMLProps, InputHTMLAttributes } from 'react';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype CheckboxPropsType = DefaultInputPropsType & {\r\n    callBack: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    status: boolean,\r\n    title:string\r\n}\r\n\r\n\r\nexport const Checkbox: React.FC<CheckboxPropsType> = (props) => {\r\n    const {\r\n        type,\r\n        title,\r\n        checked,\r\n        callBack,\r\n        ...restProps\r\n    } = props\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={props.callBack}\r\n                {...props}\r\n            />\r\n            <span >{props.title}</span>\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}","import React from 'react';\r\nimport { Button } from '../common/Button';\r\nimport { Checkbox } from '../common/Checkbox';\r\nimport { FilterPriorityType } from './ListContainer';\r\nimport style from './Lists.module.css';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    lists: Array<ListType>\r\n    removeList: (listId: number) => void\r\n    setPriorityFilter: (value: FilterPriorityType) => void\r\n    changeStatus: (number: number) => void\r\n}\r\n\r\ntype ListType = {\r\n    id: number\r\n    title: string\r\n    priority: any\r\n    isDone: boolean\r\n}\r\n\r\n\r\nfunction List(props: PropsType) {\r\n    return (\r\n        <div className={style.lists}>\r\n            <div className={style.title}>{props.title}</div>\r\n            <ul className={style.row}>\r\n                {\r\n                    props.lists.map((list) =>\r\n                        <li key={list.id}>\r\n                            <div className={style.list}>\r\n                                <div>\r\n                                    <div>\r\n                                        <Checkbox callBack={() => props.changeStatus(list.id)}\r\n                                            status={list.isDone}\r\n                                            title={list.title} />\r\n                                    </div>\r\n                                </div>\r\n                                <Button onClick={() => { props.removeList(list.id) }}\r\n                                    buttonName='✘' />\r\n                            </div>\r\n                        </li>)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <div className={style.pointer}>👇</div>\r\n                <div className={style.buttons}>\r\n                    <Button className={style.button}\r\n                        onClick={() => { props.setPriorityFilter('all') }}\r\n                        buttonName='All' />\r\n                    <Button className={style.button}\r\n                        onClick={() => { props.setPriorityFilter('middle') }}\r\n                        buttonName='Middle' />\r\n                    <Button className={style.button}\r\n                        onClick={() => { props.setPriorityFilter('high') }}\r\n                        buttonName='High' />\r\n                    <Button className={style.button}\r\n                        onClick={() => { props.setPriorityFilter('low') }}\r\n                        buttonName='Low' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default List;","import React, { useState } from 'react';\r\nimport List from './List';\r\n\r\n\r\n\r\nexport type FilterPriorityType = 'all' | 'high' | 'middle' | 'low';\r\n\r\nexport default function ListContainer() {\r\n\r\n  let [list, setList] = useState([\r\n    { id: 1, title: \"ReactJS\", priority: 'middle', isDone: false },\r\n    { id: 2, title: \"TypeScript\", priority: 'middle', isDone: false },\r\n    { id: 3, title: \"NativeJS\", priority: 'high', isDone: false },\r\n    { id: 4, title: \"Foreign Language\", priority: 'low', isDone: false },\r\n    { id: 5, title: \"Tatoo\", priority: 'high', isDone: false }\r\n  ]);\r\n\r\n  function removeList(id: number) {\r\n    let filteredLists = list.filter(list => list.id != id);\r\n    console.log(filteredLists);\r\n    setList(filteredLists);\r\n  }\r\n\r\n  function changeStatus(CheckboxItem: number) {\r\n    let newList = list;\r\n    const listsItem = newList.find(list => list.id === CheckboxItem);\r\n    if (listsItem) {\r\n      listsItem.isDone = !listsItem.isDone;\r\n      console.log(newList);\r\n      setList(newList);\r\n    }\r\n  }\r\n\r\n\r\n  let [filter, setFilter] = useState<FilterPriorityType>('all');\r\n  let priorityListsFilter = list;\r\n\r\n  if (filter === 'high') {\r\n    priorityListsFilter = list.filter(list => list.priority === 'high');\r\n  }\r\n  if (filter === 'middle') {\r\n    priorityListsFilter = list.filter(list => list.priority === 'middle');\r\n  }\r\n  if (filter === 'low') {\r\n    priorityListsFilter = list.filter(list => list.priority === 'low');\r\n  };\r\n\r\n  function setPriorityFilter(value: FilterPriorityType) {\r\n    setFilter(value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <List title='My goals' \r\n        lists={priorityListsFilter}\r\n        removeList={removeList}\r\n        setPriorityFilter={setPriorityFilter} \r\n        changeStatus={changeStatus}\r\n        />\r\n    </>\r\n  )\r\n}\r\n","import React, { KeyboardEvent, ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, useState } from 'react';\r\nimport style from '../ThirdTask/InputName.module.css';\r\n\r\n// (TypeScript) домашка от меня №4:\r\n// - добавьте в проект домашек папку common - в ней мы будем хранить универсальные компоненты\r\n// <MyInput value={value} onChange={onChange}/> // это универсальная компонента\r\n// <Hello name={name} sayHello={sayHello}/> // это НЕ универсальная компонента, так как работает только с именами\r\n// - эти компоненты должны быть УНИВЕРСАЛЬНЫМИ и иметь красивые стили (создать самому или найти в интернете)\r\n// - добавьте в проект компоненту, в которой отрисуйте эти универсальные компоненты для демонстрации\r\n// - замените в предыдущих домашках стандартные кнопки и инпуты вашими универсальными компонентами, в последующих домашках используйте свои универсальные компоненты вместо стандартных\r\n// задачи со звёздочками:\r\n// * сделайте так чтоб onChange ваших компонент сразу давал нужное значение (value/checked), а не объект ивента\r\n// * добавьте в инпуту пропс для функции, которая будет выполняться по нажатию кнопки Enter\r\n// * добавьте в свою кнопку необязательный пропс для выбора типа кнопки: стандартный (выбран изначально) или красный (для кнопок удаления/отмены/выхода/...), стили для разных типов должны быть разные\r\n// * добавить необязательный пропс error в инпут, в случае передачи в него значения нужно менять стиль инпута на красный\r\n\r\n\r\ntype PropsInputType =\r\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & {\r\n        error?: string|null,\r\n        setError?: (value: string | null) => void,\r\n        onChangeItem?: (value: string) => void,\r\n        addItem: () => void\r\n    };\r\n\r\n\r\nconst InputForm = (props: PropsInputType) => {\r\n\r\n    const { error, addItem, setError, onChangeItem, ...restProps } = props;\r\n\r\n    function onChange(e: ChangeEvent<HTMLInputElement>) {\r\n        if (setError && e.currentTarget.value.trim()) { setError(null) }\r\n        onChangeItem && onChangeItem(e.currentTarget.value)\r\n    };\r\n \r\n    function onEnterKeyPress(e: KeyboardEvent<HTMLInputElement>) {\r\n        if (e.charCode === 13) { addItem && addItem() };\r\n    };\r\n    \r\n    function onBlur() {setError && setError(null) };\r\n\r\n\r\n    return (\r\n        <input className={error ? `${style.input} ${style.error}` : 'input'}\r\n            type=\"text\"\r\n            onBlur={onBlur}\r\n            onChange={onChange}\r\n            onKeyPress={onEnterKeyPress}\r\n            {...restProps}\r\n        />\r\n    )\r\n};\r\nexport default InputForm;\r\n","import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\nimport style from './InputName.module.css';\r\nimport { NameType } from './InputName';\r\nimport InputForm from '../common/Input'\r\nimport { Button } from '../common/Button';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\nlet count = 0;\r\n\r\nexport default function InputNameContainer() {\r\n\r\n    let [userNamesArr, setUserNamesArr] = useState<Array<NameType>>([]);\r\n    let [inputItem, setItem] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    function addUserName(inputItem: string) {\r\n        let userNameArr = { id: v1(), userName: inputItem.trim() };\r\n        setUserNamesArr([userNameArr, ...userNamesArr]);\r\n        alert(`Hi${userNameArr.userName}!`);\r\n        setItem('');\r\n    };\r\n\r\n    const addItem = () => {\r\n        if (inputItem.trim() !== '') {\r\n            addUserName(inputItem);\r\n            setItem('');\r\n            count++;\r\n        } else {\r\n            setError('Enter your name 🥺');\r\n            } \r\n    };\r\n    const everyName = userNamesArr.map(n => n.userName).join(`/ `);\r\n\r\n    return (\r\n        <div className={style.activeBox}>\r\n            <h1 className={style.title}>What's your name?</h1>\r\n            <div className={style.listOfNames}>\r\n                <InputForm\r\n                    value={inputItem}\r\n                    error={error}\r\n                    setError={setError}\r\n                    addItem={addItem}\r\n                    onChangeItem={setItem}\r\n                    />\r\n                <Button onClick={addItem} buttonName=\"Send\" />\r\n                <div>\r\n                <span >Total users - {userNamesArr.length}</span>\r\n                </div>\r\n                    <span className={style.listOfNames}> {everyName} </span>\r\n                    <div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport InputNameContainer from './InputNameContainer';\r\n\r\n\r\nexport type NameType = {id: string, userName: string};\r\n\r\nexport default function InputName () {\r\n\r\n    return (\r\n        <div>\r\n           < InputNameContainer />  \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\nimport style from './App.module.css';\nimport CloudMessage from './components/FirstTask/CloudMessage';\nimport List from './components/SecondTask/ListContainer';\nimport InputName from './components/ThirdTask/InputName'\n\nexport default function App() {\n           \n  return (\n    <div className={style.app_page}>\n        <CloudMessage />\n        <List />\n        <InputName />\n      </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}